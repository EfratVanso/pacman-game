{"version":3,"sources":["setup.js","ghostMoves.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","GameBoard.js","node_modules/@babel/runtime/helpers/defineProperty.js","Pacman.js","Ghost.js","index.js"],"names":["GRID_SIZE","CELL_SIZE","DIRECTIONS","ArrowLeft","code","movement","rotation","ArrowUp","ArrowRight","ArrowDown","OBJECT_TYPE","BLANK","WALL","DOT","BLINKY","PINKY","INKY","CLYDE","PILL","PACMAN","GHOST","SCARED","GHOSTLAIR","CLASS_LIST","LEVEL","randomMovement","position","direction","objectExist","dir","nextMovePos","keys","Object","key","Math","floor","random","length","GameBoard","DOMGrid","dotCount","grid","gameWin","div","document","createElement","classList","add","innerHTML","appendChild","level","style","cssText","forEach","square","push","pos","classes","remove","object","contains","deg","transform","character","shouldMove","getNextMove","bind","makeMove","classesToRemove","classesToAdd","rotateDiv","removeObject","addObject","setNewPos","board","createGrid","Pacman","speed","startPos","e","keyCode","timer","powerPill","Ghost","name","isScared","pillT","gameGrid","querySelector","scoreTable","startButton","pillTime","POWER_PILL_TIME","GLOBAL_SPEED","gameBoard","createGameBoard","score","powerPillActive","powerPillTimer","pillCounter","playAudio","audio","Audio","play","gameOver","pacman","soundGameOver","removeEventListener","handleKeyInput","showGameStatus","clearInterval","checkCollision","ghosts","collidedGhost","find","ghost","soundGhost","gameLoop","moveCharacter","soundDot","soundPill","setInterval","pillInterval","clearTimeout","setTimeout","startGame","soundGameStart","addEventListener"],"mappings":";AAuDO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,QAAA,WAAA,QAAA,YAAA,QAAA,WAAA,QAAA,UAAA,QAAA,eAAA,EAvDA,IAAMA,EAAY,GAuDlB,QAAA,UAAA,EAtDA,IAAMC,EAAY,GAsDlB,QAAA,UAAA,EArDA,IAAMC,EAAa,CACxBC,UAAW,CACTC,KAAM,GACNC,UAAW,EACXC,SAAU,KAEZC,QAAS,CACPH,KAAM,GACNC,UAAWL,EACXM,SAAU,KAEZE,WAAY,CACVJ,KAAM,GACNC,SAAU,EACVC,SAAU,GAEZG,UAAW,CACTL,KAAM,GACNC,SAAUL,EACVM,SAAU,KAkCP,QAAA,WAAA,EA9BA,IAAMI,EAAc,CACzBC,MAAO,QACPC,KAAM,OACNC,IAAK,MACLC,OAAQ,SACRC,MAAO,QACPC,KAAM,OACNC,MAAO,QACPC,KAAM,OACNC,OAAQ,SACRC,MAAO,QACPC,OAAQ,SACRC,UAAW,QAkBN,QAAA,YAAA,EAdA,IAAMC,EAAa,CACxBb,EAAYC,MACZD,EAAYE,KACZF,EAAYG,IACZH,EAAYI,OACZJ,EAAYK,MACZL,EAAYM,KACZN,EAAYO,MACZP,EAAYQ,KACZR,EAAYS,OACZT,EAAYY,WAIP,QAAA,WAAA,EAAA,IAAME,EAAQ,CACnB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAvBpD,QAAA,MAAA;;ACjCN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAtBD,IAAA,EAAA,QAAA,WAGO,SAASC,EAAeC,EAAUC,EAAWC,GAOhDA,IANEC,IAAAA,EAAMF,EACNG,EAAcJ,EAAWG,EAAIxB,SAE3B0B,EAAOC,OAAOD,KAAK7B,EAAZ,YAGX0B,EAAYE,EAAapB,EAAYE,YAAAA,OACrCgB,EAAYE,EAAapB,EAAYU,YAAAA,QACrC,CAEMa,IAAAA,EAAMF,EAAKG,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,SAIjDP,EAAcJ,GAFdG,EAAM3B,EAAW+B,WAAAA,IAEY5B,SAGxB,MAAA,CAAEyB,YAAAA,EAAaH,UAAWE;;ACrBnC,SAAA,EAAA,EAAA,IACA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAEA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,GAGA,OAAA,EAGA,OAAA,QAAA;;ACVA,IAAA,EAAA,QAAA,sBAEA,SAAA,EAAA,GACA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAGA,OAAA,QAAA;;ACNA,SAAA,EAAA,GACA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAGA,OAAA,QAAA;;ACJA,IAAA,EAAA,QAAA,sBAEA,SAAA,EAAA,EAAA,GACA,GAAA,EAAA,CACA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GACA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAEA,MADA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MACA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GACA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAGA,OAAA,QAAA;;ACXA,SAAA,IACA,MAAA,IAAA,UAAA,wIAGA,OAAA,QAAA;;ACJA,IAAA,EAAA,QAAA,uBAEA,EAAA,QAAA,qBAEA,EAAA,QAAA,gCAEA,EAAA,QAAA,uBAEA,SAAA,EAAA,GACA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAGA,OAAA,QAAA;;ACZA,SAAA,EAAA,EAAA,GACA,KAAA,aAAA,GACA,MAAA,IAAA,UAAA,qCAIA,OAAA,QAAA;;ACNA,SAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,WAAA,EAAA,aAAA,EACA,EAAA,cAAA,EACA,UAAA,IAAA,EAAA,UAAA,GACA,OAAA,eAAA,EAAA,EAAA,IAAA,IAIA,SAAA,EAAA,EAAA,EAAA,GAGA,OAFA,GAAA,EAAA,EAAA,UAAA,GACA,GAAA,EAAA,EAAA,GACA,EAGA,OAAA,QAAA;;ACgEeS,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAAAA,6CAAAA,EAAAA,EAAAA,QAAAA,0CAAAA,EAAAA,EAAAA,QAAAA,uCAhFf,EAAA,QAAA,WAgFeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA9ETA,IAAAA,EAAAA,WACQC,SAAAA,EAAAA,IAAS,EAAA,EAAA,SAAA,KAAA,GACdC,KAAAA,SAAW,EACXC,KAAAA,KAAO,GACPF,KAAAA,QAAUA,EA0EJD,OAAAA,EAAAA,EAAAA,SAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAvEEI,MAAAA,SAAAA,GAEPC,IAAAA,EAAMC,SAASC,cAAc,OACnCF,EAAIG,UAAUC,IAAI,eAClBJ,EAAIK,UAAeN,GAAAA,OAAAA,EAAU,OAAS,cACjCH,KAAAA,QAAQU,YAAYN,KAkEdL,CAAAA,IAAAA,aA/DFY,MAAAA,SAAAA,GAAO,IAAA,EAAA,KACXV,KAAAA,SAAW,EACXC,KAAAA,KAAO,GACPF,KAAAA,QAAQS,UAAY,GAEpBT,KAAAA,QAAQY,MAAMC,QAA2CpD,iCAAAA,OAAAA,EAA9D,UAA4EC,MAAAA,OAAAA,EAA5E,UAAA,QAEAiD,EAAMG,QAAQ,SAACC,GACPX,IAAAA,EAAMC,SAASC,cAAc,OACnCF,EAAIG,UAAUC,IAAI,SAAUxB,EAAW+B,WAAAA,IACvCX,EAAIQ,MAAMC,QAAoBnD,UAAAA,OAAAA,EAA9B,UAAsDA,gBAAAA,OAAAA,EAAtD,UAAA,OACA,EAAKsC,QAAQU,YAAYN,GACzB,EAAKF,KAAKc,KAAKZ,GAGXpB,EAAW+B,WAAAA,KAAY5C,EAAYG,YAAAA,KAAK,EAAK2B,eAgDxCF,CAAAA,IAAAA,YA5CHkB,MAAAA,SAAAA,EAAKC,GAAS,IAAA,GACjBhB,EAAAA,KAAAA,KAAKe,GAAKV,WAAUC,IAAOU,MAAAA,GAAAA,EAAAA,EAAAA,SAAAA,MA2CrBnB,CAAAA,IAAAA,eAxCAkB,MAAAA,SAAAA,EAAKC,GAAS,IAAA,GACpBhB,EAAAA,KAAAA,KAAKe,GAAKV,WAAUY,OAAUD,MAAAA,GAAAA,EAAAA,EAAAA,SAAAA,MAuCxBnB,CAAAA,IAAAA,cApCDkB,MAAAA,SAAAA,EAAKG,GACR,OAAA,KAAKlB,KAAKe,GAAKV,UAAUc,SAASD,KAmC9BrB,CAAAA,IAAAA,YAhCHkB,MAAAA,SAAAA,EAAKK,GACRpB,KAAAA,KAAKe,GAAKL,MAAMW,UAAsBD,UAAAA,OAAAA,EAA3C,UA+BWvB,CAAAA,IAAAA,gBA5BCyB,MAAAA,SAAAA,GACRA,GAAAA,EAAUC,aAAc,CACSD,IAAAA,EAAAA,EAAUE,YAC3C,KAAKrC,YAAYsC,KAAK,OADhBpC,EAAAA,EAAAA,YAAaH,EAAAA,EAAAA,UAGqBoC,EAAAA,EAAUI,WAA5CC,EAAAA,EAAAA,gBAAiBC,EAAAA,EAAAA,aAErBN,EAAUzD,UAAYwB,IAAgBiC,EAAUP,MAE7Cc,KAAAA,UAAUxC,EAAaiC,EAAUlC,IAAIvB,UAErCgE,KAAAA,UAAUP,EAAUP,IAAK,IAG3Be,KAAAA,aAAaR,EAAUP,IAAKY,GAC5BI,KAAAA,UAAU1C,EAAauC,GAE5BN,EAAUU,UAAU3C,EAAaH,OAWxBW,CAAAA,CAAAA,IAAAA,kBAPUC,MAAAA,SAAAA,EAASW,GACxBwB,IAAAA,EAAQ,IAAI,KAAKnC,GAEhBmC,OADPA,EAAMC,WAAWzB,GACVwB,MAIIpC,EA9ETA,GA8ESA,EAAAA,EAAAA,QAAAA,QAAAA;;AChFf,SAAA,EAAA,EAAA,EAAA,GAYA,OAXA,KAAA,EACA,OAAA,eAAA,EAAA,EAAA,CACA,MAAA,EACA,YAAA,EACA,cAAA,EACA,UAAA,IAGA,EAAA,GAAA,EAGA,EAGA,OAAA,QAAA;;AC+CesC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAAAA,0CAAAA,EAAAA,EAAAA,QAAAA,uCAAAA,EAAAA,EAAAA,QAAAA,0CA9Df,EAAA,QAAA,WA8DeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA5DTA,IAAAA,EAAAA,WACQC,SAAAA,EAAAA,EAAOC,GAAU,IAAA,EAAA,MAAA,EAAA,EAAA,SAAA,KAAA,IA4CZ,EAAA,EAAA,SAAA,KAAA,iBAAA,SAACC,EAAGnD,GACfC,IAAAA,EAEAkD,GAAAA,EAAEC,SAAW,IAAMD,EAAEC,SAAW,GAAhCD,CACFlD,EAAM3B,EAAW6E,WAAAA,EAAE9C,KAKfH,IAAAA,EAAc,EAAK0B,IAAM3B,EAAIxB,SAC/BuB,EAAYE,EAAapB,EAAYE,YAAAA,OACzCgB,EAAYE,EAAapB,EAAYY,YAAAA,aACrC,EAAKO,IAAMA,MAvDN2B,KAAAA,IAAMsB,EACND,KAAAA,MAAQA,EACRhD,KAAAA,IAAM,KACNoD,KAAAA,MAAQ,EACRC,KAAAA,WAAY,EACZ5E,KAAAA,UAAW,EAqDLsE,OAAAA,EAAAA,EAAAA,SAAAA,EAAAA,CAAAA,CAAAA,IAAAA,aAlDA,MAAA,WAEP,GAAC,KAAK/C,IAEN,OAAA,KAAKoD,QAAU,KAAKJ,OACjBI,KAAAA,MAAQ,GACN,QAEJA,KAAAA,UA0CML,CAAAA,IAAAA,cAvCDhD,MAAAA,SAAAA,GACNE,IAAAA,EAAc,KAAK0B,IAAM,KAAK3B,IAAIxB,SAS/B,OANLuB,EAAYE,EAAapB,EAAYE,YAAAA,OACrCgB,EAAYE,EAAapB,EAAYY,YAAAA,cAErCQ,EAAc,KAAK0B,KAGd,CAAE1B,YAAAA,EAAaH,UAAW,KAAKE,OA6B3B+C,CAAAA,IAAAA,WA1BF,MAAA,WAIF,MAAA,CAAER,gBAHe,CAAC1D,EAAYS,YAAAA,QAGXkD,aAFL,CAAC3D,EAAYS,YAAAA,WAwBvByD,CAAAA,IAAAA,YAnBH9C,MAAAA,SAAAA,GACH0B,KAAAA,IAAM1B,MAkBA8C,EA5DTA,GA4DSA,EAAAA,EAAAA,QAAAA,QAAAA;;AChBAO,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAAAA,6CAAAA,EAAAA,EAAAA,QAAAA,0CAAAA,EAAAA,EAAAA,QAAAA,uCA9Cf,EAAA,QAAA,WA8CeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA5CTA,IAAAA,EAAAA,WAC6C,SAAA,IAArCN,IAAAA,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGC,EAA0B,UAAA,OAAA,EAAA,UAAA,QAAA,EAAhBzE,EAAgB,UAAA,OAAA,EAAA,UAAA,QAAA,EAAN+E,EAAM,UAAA,OAAA,EAAA,UAAA,QAAA,GAAA,EAAA,EAAA,SAAA,KAAA,GAC1CA,KAAAA,KAAOA,EACP/E,KAAAA,SAAWA,EACXyE,KAAAA,SAAWA,EACXtB,KAAAA,IAAMsB,EACNjD,KAAAA,IAAM3B,EAAWM,WAAAA,WACjBqE,KAAAA,MAAQA,EACRI,KAAAA,MAAQ,EACRI,KAAAA,UAAW,EACX/E,KAAAA,UAAW,EAkCL6E,OAAAA,EAAAA,EAAAA,SAAAA,EAAAA,CAAAA,CAAAA,IAAAA,aAhCA,MAAA,WACP,GAAA,KAAKF,QAAU,KAAKJ,MAEf,OADFI,KAAAA,MAAQ,GACN,EAEJA,KAAAA,UA2BME,CAAAA,IAAAA,cAxBDvD,MAAAA,SAAAA,GAEyB,IAAA,EAAA,KAAKvB,SACtC,KAAKmD,IACL,KAAK3B,IACLD,GAEK,MAAA,CAAEE,YALDA,EAAAA,YAKcH,UALDA,EAAAA,aAsBVwD,CAAAA,IAAAA,WAfF,MAAA,WACHf,IAAAA,EAAkB,CAAC1D,EAAYU,YAAAA,MAAOV,EAAYW,YAAAA,OAAQ,KAAK+D,MACjEf,EAAe,CAAC3D,EAAYU,YAAAA,MAAO,KAAKgE,MAIrC,OAFH,KAAKC,WAAUhB,EAAmBA,GAAAA,QAAAA,EAAAA,EAAAA,SAAAA,GAAc3D,CAAAA,EAAYW,YAAAA,UAEzD,CAAE+C,gBAAAA,EAAiBC,aAAAA,KASfc,CAAAA,IAAAA,YANHrD,MAAAA,SAAAA,EAAaH,GAChB6B,KAAAA,IAAM1B,EACND,KAAAA,IAAMF,MAIAwD,EA5CTA,GA4CSA,EAAAA,EAAAA,QAAAA,QAAAA;;;;;;;;;;;;ACiHf,aA/JA,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,gBAEA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,YAEA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,2BAoJA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAlJA,IAgBIG,EAhBEC,EAAW3C,SAAS4C,cAAc,SAClCC,EAAa7C,SAAS4C,cAAc,UACpCE,EAAc9C,SAAS4C,cAAc,iBACrCG,EAAU/C,SAAS4C,cAAc,aAEjCI,EAAkB,IAClBC,EAAe,GACfC,EAAYxD,EAAUyD,QAAAA,gBAAgBR,EAAU/D,EAApC,OAEdwE,EAAQ,EACRf,EAAQ,KACRvC,GAAU,EACVuD,GAAkB,EAClBC,EAAiB,KAEjBC,EAAYP,EAGhB,SAASQ,EAAUC,GACG,IAAIC,MAAMD,GAClBE,OAId,SAASC,EAASC,EAAQhE,GACxB2D,EAAUM,EAAD,SAET9D,SAAS+D,oBAAoB,UAAW,SAAC5B,GACvC0B,OAAAA,EAAOG,eAAe7B,EAAGe,EAAUlE,YAAYsC,KAAK4B,MAGtDA,EAAUe,eAAenE,GAEzBoE,cAAc7B,GAEdS,EAAY5C,UAAUY,OAAO,QAG/B,SAASqD,EAAeN,EAAQO,GACxBC,IAAAA,EAAgBD,EAAOE,KAAK,SAACC,GAAUV,OAAAA,EAAOjD,MAAQ2D,EAAM3D,MAE9DyD,IACER,EAAOvB,WACTkB,EAAUgB,EAAD,SACTtB,EAAUvB,aAAa0C,EAAczD,IAAK,CACxC9C,EAAYU,YAAAA,MACZV,EAAYW,YAAAA,OACZ4F,EAAc7B,OAEhB6B,EAAczD,IAAMyD,EAAcnC,SAClCkB,GAAS,MAETF,EAAUvB,aAAakC,EAAOjD,IAAK,CAAC9C,EAAYS,YAAAA,SAChD2E,EAAUxB,UAAUmC,EAAOjD,IAAK,GAChCgD,EAASC,EAAQlB,KAKvB,SAAS8B,EAASZ,EAAQO,GAExBlB,EAAUwB,cAAcb,GAExBM,EAAeN,EAAQO,GAEvBA,EAAO3D,QAAQ,SAAC8D,GAAUrB,OAAAA,EAAUwB,cAAcH,KAElDJ,EAAeN,EAAQO,GAEnBlB,EAAUlE,YAAY6E,EAAOjD,IAAK9C,EAAYG,YAAAA,OAChDuF,EAAUmB,EAAD,SAETzB,EAAUvB,aAAakC,EAAOjD,IAAK,CAAC9C,EAAYG,YAAAA,MAEhDiF,EAAUtD,WAEVwD,GAAS,IAGPF,EAAUlE,YAAY6E,EAAOjD,IAAK9C,EAAYQ,YAAAA,QAChDkF,EAAUoB,EAAD,SAET1B,EAAUvB,aAAakC,EAAOjD,IAAK,CAAC9C,EAAYQ,YAAAA,OAEhDuF,EAAOvB,WAAY,EACnBc,GAAS,GAETc,cAAcxB,GACdA,EAAQmC,YAAYC,EAAa,KACjC/B,EAAS3C,UAAU4C,EAAgB,IACnCO,EAAYP,EAEZ+B,aAAazB,GACbA,EAAiB0B,WACf,WAAOnB,OAAAA,EAAOvB,WAAY,EAAO4B,cAAcxB,IAC/CM,IAIAa,EAAOvB,YAAce,IACvBA,EAAkBQ,EAAOvB,UACzB8B,EAAO3D,QAAQ,SAAC8D,GAAWA,OAAAA,EAAM9B,SAAWoB,EAAOvB,aAG1B,IAAvBY,EAAUtD,WACZE,GAAU,EACV8D,EAASC,EAAQlB,IAGnBE,EAAWzC,UAAYgD,EAEzB,SAAS0B,IACLvB,GAAwB,IACxBR,EAAS3C,UAAUmD,EAAY,IAGnC,SAAS0B,IACPzB,EAAU0B,EAAD,SAETpF,GAAU,EACVuD,GAAkB,EAClBD,EAAQ,EACRG,EAAYP,EAEZF,EAAY5C,UAAUC,IAAI,QAE1B+C,EAAUnB,WAAWnD,EAArB,OAEMiF,IAAAA,EAAS,IAAI7B,EAAJ,QAAW,EAAG,KAC7BkB,EAAUtB,UAAU,IAAK,CAAC9D,EAAYS,YAAAA,SACtCyB,SAASmF,iBAAiB,UAAW,SAAChD,GACpC0B,OAAAA,EAAOG,eAAe7B,EAAGe,EAAUlE,YAAYsC,KAAK4B,MAGhDkB,IAAAA,EAAS,CACb,IAAI7B,EAAJ,QAAU,EAAG,IAAK1D,EAAlB,eAAkCf,EAAYI,YAAAA,QAC9C,IAAIqE,EAAJ,QAAU,EAAG,IAAK1D,EAAlB,eAAkCf,EAAYK,YAAAA,OAC9C,IAAIoE,EAAJ,QAAU,EAAG,IAAK1D,EAAlB,eAAkCf,EAAYM,YAAAA,MAC9C,IAAImE,EAAJ,QAAU,EAAG,IAAK1D,EAAlB,eAAkCf,EAAYO,YAAAA,QAIhDgE,EAAQwC,YAAY,WAAMJ,OAAAA,EAASZ,EAAQO,IAASnB,GAItDH,EAAYqC,iBAAiB,QAASF","file":"p.7757eef2.js","sourceRoot":"..","sourcesContent":["export const GRID_SIZE = 20;\nexport const CELL_SIZE = 20;\nexport const DIRECTIONS = {\n  ArrowLeft: {\n    code: 37,\n    movement: -1,\n    rotation: 180\n  },\n  ArrowUp: {\n    code: 38,\n    movement: -GRID_SIZE,\n    rotation: 270\n  },\n  ArrowRight: {\n    code: 39,\n    movement: 1,\n    rotation: 0\n  },\n  ArrowDown: {\n    code: 40,\n    movement: GRID_SIZE,\n    rotation: 90\n  }\n};\n\nexport const OBJECT_TYPE = { // entities\n  BLANK: 'blank',\n  WALL: 'wall',\n  DOT: 'dot',\n  BLINKY: 'blinky',\n  PINKY: 'pinky',\n  INKY: 'inky',\n  CLYDE: 'clyde',\n  PILL: 'pill',\n  PACMAN: 'pacman',\n  GHOST: 'ghost',\n  SCARED: 'scared',\n  GHOSTLAIR: 'lair'\n};\n\n// Lookup array for classes\nexport const CLASS_LIST = [\n  OBJECT_TYPE.BLANK, //1\n  OBJECT_TYPE.WALL, //2\n  OBJECT_TYPE.DOT, //3...\n  OBJECT_TYPE.BLINKY,\n  OBJECT_TYPE.PINKY,\n  OBJECT_TYPE.INKY,\n  OBJECT_TYPE.CLYDE,\n  OBJECT_TYPE.PILL,\n  OBJECT_TYPE.PACMAN,\n  OBJECT_TYPE.GHOSTLAIR\n];\n\n// prettier-ignore\nexport const LEVEL = [\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n  1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1,\n  1, 7, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 7, 1,\n  1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n  1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1,\n  1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1,\n  1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1,\n  0, 0, 0, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0,\n  0, 0, 0, 1, 2, 1, 2, 1, 9, 9, 9, 9, 1, 2, 1, 2, 1, 0, 0, 0,\n  1, 1, 1, 1, 2, 1, 2, 1, 9, 9, 9, 9, 1, 2, 1, 2, 1, 1, 1, 1, \n  1, 0, 0, 0, 2, 2, 2, 1, 9, 9, 9, 9, 1, 2, 2, 2, 0, 0, 0, 1, \n  1, 1, 1, 1, 2, 1, 2, 1, 9, 9, 9, 9, 1, 2, 1, 2, 1, 1, 1, 1, \n  0, 0, 0, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 0, 0, 0,\n  0, 0, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 0, 0, 0,\n  1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1,\n  1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1,\n  1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1,\n  1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n  1, 7, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 7, 1,\n  1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1,\n  1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\n","import { DIRECTIONS, OBJECT_TYPE } from './setup';\r\n\r\n// Primitive random movement.\r\nexport function randomMovement(position, direction, objectExist) {\r\n  let dir = direction;\r\n  let nextMovePos = position + dir.movement;\r\n  // Create an array from the directions objects keys\r\n  const keys = Object.keys(DIRECTIONS);\r\n\r\n  while (\r\n    objectExist(nextMovePos, OBJECT_TYPE.WALL) ||\r\n    objectExist(nextMovePos, OBJECT_TYPE.GHOST)\r\n  ) {\r\n    // Get a random key from that array\r\n    const key = keys[Math.floor(Math.random() * keys.length)];\r\n    // Set the new direction\r\n    dir = DIRECTIONS[key];\r\n    // Set the next move\r\n    nextMovePos = position + dir.movement;\r\n  }\r\n\r\n  return { nextMovePos, direction: dir };\r\n}","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","import { GRID_SIZE, CELL_SIZE, OBJECT_TYPE, CLASS_LIST } from './setup';\r\n\r\nclass GameBoard {\r\n  constructor(DOMGrid) {\r\n    this.dotCount = 0;\r\n    this.grid = [];\r\n    this.DOMGrid = DOMGrid;\r\n  }\r\n\r\n  showGameStatus(gameWin) {\r\n    // Create and show game win or game over\r\n    const div = document.createElement('div');\r\n    div.classList.add('game-status');\r\n    div.innerHTML = `${gameWin ? 'WIN!' : 'GAME OVER!'}`;\r\n    this.DOMGrid.appendChild(div);\r\n  }\r\n\r\n  createGrid(level) {\r\n    this.dotCount = 0;\r\n    this.grid = [];\r\n    this.DOMGrid.innerHTML = '';\r\n    // First set correct amount of columns based on Grid Size and Cell Size\r\n    this.DOMGrid.style.cssText = `grid-template-columns: repeat(${GRID_SIZE}, ${CELL_SIZE}px);`;\r\n\r\n    level.forEach((square) => {\r\n      const div = document.createElement('div');\r\n      div.classList.add('square', CLASS_LIST[square]);\r\n      div.style.cssText = `width: ${CELL_SIZE}px; height: ${CELL_SIZE}px;`;\r\n      this.DOMGrid.appendChild(div);\r\n      this.grid.push(div);\r\n\r\n      // Add dots\r\n      if (CLASS_LIST[square] === OBJECT_TYPE.DOT) this.dotCount++;\r\n    });\r\n  }\r\n\r\n  addObject(pos, classes) {\r\n    this.grid[pos].classList.add(...classes);\r\n  }\r\n\r\n  removeObject(pos, classes) {\r\n    this.grid[pos].classList.remove(...classes);\r\n  }\r\n  // Can have an arrow function here cause of this binding\r\n  objectExist(pos, object) {\r\n    return this.grid[pos].classList.contains(object);\r\n  };\r\n\r\n  rotateDiv(pos, deg) {\r\n    this.grid[pos].style.transform = `rotate(${deg}deg)`;\r\n  }\r\n\r\n  moveCharacter(character) {\r\n    if (character.shouldMove()) {\r\n      const { nextMovePos, direction } = character.getNextMove(\r\n        this.objectExist.bind(this)\r\n      );\r\n      const { classesToRemove, classesToAdd } = character.makeMove();\r\n\r\n      if (character.rotation && nextMovePos !== character.pos) {\r\n        // Rotate\r\n        this.rotateDiv(nextMovePos, character.dir.rotation);\r\n        // Rotate the previous div back\r\n        this.rotateDiv(character.pos, 0);\r\n      }\r\n\r\n      this.removeObject(character.pos, classesToRemove);\r\n      this.addObject(nextMovePos, classesToAdd);\r\n\r\n      character.setNewPos(nextMovePos, direction);\r\n    }\r\n  }\r\n\r\n  static createGameBoard(DOMGrid, level) {\r\n    const board = new this(DOMGrid);\r\n    board.createGrid(level);\r\n    return board;\r\n  }\r\n}\r\n\r\nexport default GameBoard;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","import { OBJECT_TYPE, DIRECTIONS } from \"./setup\";\r\n\r\nclass Pacman {\r\n  constructor(speed, startPos) {\r\n    this.pos = startPos;\r\n    this.speed = speed;\r\n    this.dir = null;\r\n    this.timer = 0;\r\n    this.powerPill = false;\r\n    this.rotation = true;\r\n  }\r\n\r\n  shouldMove() {\r\n    // Don't move before a key is pressed\r\n    if (!this.dir) return;\r\n\r\n    if (this.timer === this.speed) {\r\n      this.timer = 0;\r\n      return true;\r\n    }\r\n    this.timer++;\r\n  }\r\n\r\n  getNextMove(objectExist) {\r\n    let nextMovePos = this.pos + this.dir.movement;\r\n    // Do we collide with a wall?\r\n    if (\r\n      objectExist(nextMovePos, OBJECT_TYPE.WALL) ||\r\n      objectExist(nextMovePos, OBJECT_TYPE.GHOSTLAIR)\r\n    ) {\r\n      nextMovePos = this.pos;\r\n    }\r\n\r\n    return { nextMovePos, direction: this.dir };\r\n  }\r\n\r\n  makeMove() {\r\n    const classesToRemove = [OBJECT_TYPE.PACMAN];\r\n    const classesToAdd = [OBJECT_TYPE.PACMAN];\r\n\r\n    return { classesToRemove, classesToAdd };\r\n  }\r\n\r\n  setNewPos(nextMovePos) {\r\n    this.pos = nextMovePos;\r\n  }\r\n\r\n  handleKeyInput = (e, objectExist) => {\r\n    let dir;\r\n\r\n    if (e.keyCode >= 37 && e.keyCode <= 40) {\r\n      dir = DIRECTIONS[e.key];\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    const nextMovePos = this.pos + dir.movement;\r\n    if (objectExist(nextMovePos, OBJECT_TYPE.WALL)||\r\n    objectExist(nextMovePos, OBJECT_TYPE.GHOSTLAIR)) return;\r\n    this.dir = dir;\r\n  };\r\n}\r\nexport default Pacman;\r\n","import { OBJECT_TYPE, DIRECTIONS } from \"./setup\";\r\n\r\nclass Ghost {\r\n  constructor(speed = 5, startPos, movement, name) {\r\n    this.name = name;\r\n    this.movement = movement;\r\n    this.startPos = startPos;\r\n    this.pos = startPos;\r\n    this.dir = DIRECTIONS.ArrowRight;\r\n    this.speed = speed;\r\n    this.timer = 0;\r\n    this.isScared = false;\r\n    this.rotation = false;\r\n  }\r\n  shouldMove() {\r\n    if (this.timer === this.speed) {\r\n      this.timer = 0;\r\n      return true;\r\n    }\r\n    this.timer++;\r\n  }\r\n\r\n  getNextMove(objectExist) {\r\n    // Call move algorithm here\r\n    const { nextMovePos, direction } = this.movement(\r\n      this.pos,\r\n      this.dir,\r\n      objectExist\r\n    );\r\n    return { nextMovePos, direction };\r\n  }\r\n  makeMove() {\r\n    const classesToRemove = [OBJECT_TYPE.GHOST, OBJECT_TYPE.SCARED, this.name];\r\n    let classesToAdd = [OBJECT_TYPE.GHOST, this.name];\r\n\r\n    if (this.isScared) classesToAdd = [...classesToAdd, OBJECT_TYPE.SCARED];\r\n\r\n    return { classesToRemove, classesToAdd };\r\n  }\r\n\r\n  setNewPos(nextMovePos, direction) {\r\n    this.pos = nextMovePos;\r\n    this.dir = direction;\r\n  }\r\n}\r\n\r\nexport default Ghost;\r\n\r\n","import { LEVEL, OBJECT_TYPE } from './setup';\nimport { randomMovement } from './ghostMoves';\n// Classes\nimport GameBoard from './GameBoard';\nimport Pacman from './Pacman';\nimport Ghost from './Ghost';\n// Sounds\nimport soundDot from './sounds/munch.wav';\nimport soundPill from './sounds/pill.wav';\nimport soundGameStart from './sounds/game_start.wav';\nimport soundGameOver from './sounds/death.wav';\nimport soundGhost from './sounds/eat_ghost.wav';\n// Dom Elements\nconst gameGrid = document.querySelector('#game');\nconst scoreTable = document.querySelector('#score');\nconst startButton = document.querySelector('#start-button');\nconst pillTime =document.querySelector('#pillTime');\n// Game constants\nconst POWER_PILL_TIME = 10000; // ms\nconst GLOBAL_SPEED = 80; // ms\nconst gameBoard = GameBoard.createGameBoard(gameGrid, LEVEL);\n// Initial setup\nlet score = 0;\nlet timer = null;\nlet gameWin = false;\nlet powerPillActive = false;\nlet powerPillTimer = null;\n\nlet pillCounter=POWER_PILL_TIME;\nlet pillT;\n// --- AUDIO --- //\nfunction playAudio(audio) {\n  const soundEffect = new Audio(audio);\n  soundEffect.play();\n}\n\n// --- GAME CONTROLLER --- //\nfunction gameOver(pacman, grid) {\n  playAudio(soundGameOver);\n\n  document.removeEventListener('keydown', (e) =>\n    pacman.handleKeyInput(e, gameBoard.objectExist.bind(gameBoard))\n  );\n\n  gameBoard.showGameStatus(gameWin);\n\n  clearInterval(timer);\n  // Show startbutton\n  startButton.classList.remove('hide');\n}\n\nfunction checkCollision(pacman, ghosts) {\n  const collidedGhost = ghosts.find((ghost) => pacman.pos === ghost.pos);\n\n  if (collidedGhost) {\n    if (pacman.powerPill) {\n      playAudio(soundGhost);\n      gameBoard.removeObject(collidedGhost.pos, [\n        OBJECT_TYPE.GHOST,\n        OBJECT_TYPE.SCARED,\n        collidedGhost.name\n      ]);\n      collidedGhost.pos = collidedGhost.startPos;\n      score += 100;\n    } else {\n      gameBoard.removeObject(pacman.pos, [OBJECT_TYPE.PACMAN]);\n      gameBoard.rotateDiv(pacman.pos, 0);\n      gameOver(pacman, gameGrid);\n    }\n  }\n}\n\nfunction gameLoop(pacman, ghosts) {\n  // 1. Move Pacman\n  gameBoard.moveCharacter(pacman);\n  // 2. Check Ghost collision on the old positions\n  checkCollision(pacman, ghosts);\n  // 3. Move ghosts\n  ghosts.forEach((ghost) => gameBoard.moveCharacter(ghost));\n  // 4. Do a new ghost collision check on the new positions\n  checkCollision(pacman, ghosts);\n  // 5. Check if Pacman eats a dot\n  if (gameBoard.objectExist(pacman.pos, OBJECT_TYPE.DOT)) {\n    playAudio(soundDot);\n\n    gameBoard.removeObject(pacman.pos, [OBJECT_TYPE.DOT]);\n    // Remove a dot\n    gameBoard.dotCount--;\n    // Add Score\n    score += 10;\n  }\n  // 6. Check if Pacman eats a power pill\n  if (gameBoard.objectExist(pacman.pos, OBJECT_TYPE.PILL)) {\n    playAudio(soundPill);\n\n    gameBoard.removeObject(pacman.pos, [OBJECT_TYPE.PILL]);\n\n    pacman.powerPill = true;\n    score += 50;\n\n    clearInterval(pillT);\n    pillT = setInterval(pillInterval,1000);//Shows a countdown of a power pill\n    pillTime.innerHTML=POWER_PILL_TIME/1000;\n    pillCounter=POWER_PILL_TIME;\n\n    clearTimeout(powerPillTimer);\n    powerPillTimer = setTimeout(\n      () => (pacman.powerPill = false, clearInterval(pillT)),\n      POWER_PILL_TIME\n    );\n  }\n  // 7. Change ghost scare mode depending on powerpill\n  if (pacman.powerPill !== powerPillActive) {\n    powerPillActive = pacman.powerPill;\n    ghosts.forEach((ghost) => (ghost.isScared = pacman.powerPill));\n  }\n  // 8. Check if all dots have been eaten\n  if (gameBoard.dotCount === 0) {\n    gameWin = true;\n    gameOver(pacman, gameGrid);\n  }\n  // 9. Show new score\n  scoreTable.innerHTML = score;\n}\nfunction pillInterval(){\n    pillCounter=pillCounter-1000;\n    pillTime.innerHTML=pillCounter/1000;\n      \n}\nfunction startGame() {\n  playAudio(soundGameStart);\n\n  gameWin = false;\n  powerPillActive = false;\n  score = 0;\n  pillCounter=POWER_PILL_TIME;\n\n  startButton.classList.add('hide');\n\n  gameBoard.createGrid(LEVEL);\n\n  const pacman = new Pacman(2, 287);\n  gameBoard.addObject(287, [OBJECT_TYPE.PACMAN]);\n  document.addEventListener('keydown', (e) =>\n    pacman.handleKeyInput(e, gameBoard.objectExist.bind(gameBoard))\n  );\n\n  const ghosts = [\n    new Ghost(5, 188, randomMovement, OBJECT_TYPE.BLINKY),\n    new Ghost(4, 209, randomMovement, OBJECT_TYPE.PINKY),\n    new Ghost(3, 230, randomMovement, OBJECT_TYPE.INKY),\n    new Ghost(2, 251, randomMovement, OBJECT_TYPE.CLYDE)\n  ];\n\n  // Gameloop\n  timer = setInterval(() => gameLoop(pacman, ghosts), GLOBAL_SPEED);\n}\n\n// Initialize game\nstartButton.addEventListener('click', startGame);"]}